AWSTemplateFormatVersion: '2010-09-09'
Description: IAM roles and policies for ECS, CodePipeline, CodeDeploy, and GitHub OIDC

Parameters:
  GitHubRepo:
    Type: String
    Description: GitHub repo for OIDC trust (e.g., owner/repo)
  GitHubBranch:
    Type: String
    Default: main
    Description: Branch for OIDC trust
  EcrRepositoryArn:
    Type: String
    Description: ARN of ECR repo (imported from ecr stack)

Resources:
  # GitHub OIDC Provider
  GitHubOidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1  # GitHub's thumbprint

  # GitHub OIDC Role for ECR push
  GitHubOidcRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref GitHubOidcProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubRepo}:ref:refs/heads/${GitHubBranch}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser  # Least privilege for ECR push

  # ECS Task Execution Role
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EcsTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # CodePipeline Role
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketVersioning
                  - codedeploy:*
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - iam:PassRole
                  # Add these ECR permissions:
                  - ecr:DescribeImages
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchCheckLayerAvailability
                Resource: '*'

  # CodeDeploy Role for ECS
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS  # Least privilege for ECS blue/green

Outputs:
  GitHubOidcRoleArn:
    Value: !GetAtt GitHubOidcRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-GitHubOidcRoleArn
  EcsTaskExecutionRoleArn:
    Value: !GetAtt EcsTaskExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-EcsTaskExecutionRoleArn
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CodePipelineRoleArn
  CodeDeployRoleArn:
    Value: !GetAtt CodeDeployRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CodeDeployRoleArn