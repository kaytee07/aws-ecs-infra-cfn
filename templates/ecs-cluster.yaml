AWSTemplateFormatVersion: '2010-09-09'
Description: ECS cluster, service, and autoscaling

Parameters:
  TargetGroupArn:
    Type: String
    Description: ARN of the blue target group (imported from alb stack)
  AlbSecurityGroupId:
    Type: String
    Description: Security group ID of the ALB (imported from alb stack)
  ClusterName:
    Type: String
    Default: SpringBootCluster
  ContainerImage:
    Type: String
    Description: ECR image URI (e.g., from ecr stack)
  TaskCpu:
    Type: String
    Default: 256
  TaskMemory:
    Type: String
    Default: 512
  VpcId:
    Type: String
    Description: VPC ID (imported)
  PrivateSubnetIds:
    Type: String
    Description: Comma-separated private subnet IDs
  EcsTaskExecutionRoleArn:
    Type: String
    Description: ARN of task execution role

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: spring-boot-task
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref EcsTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: spring-boot-container
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/spring-boot
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/spring-boot
      RetentionInDays: 14

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: spring-boot-service
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [ ',', !Ref PrivateSubnetIds ]
          SecurityGroups:
            - !Ref EcsSecurityGroup
          AssignPublicIp: DISABLED  # Private subnets
      LoadBalancers:
        - ContainerName: spring-boot-container
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupArn
      DeploymentController:
        Type: CODE_DEPLOY  # For blue/green

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref AlbSecurityGroupId  # Assume imported or linked

  # Autoscaling
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/${ECSCluster}/${ECSService.Name}
      RoleARN: arn:aws:iam::714377355835:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CpuScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0  # Scale at 70% CPU
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

Outputs:
  ClusterName:
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterName
  ServiceName:
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub ${AWS::StackName}-ServiceName
  TaskDefinitionArn:
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub ${AWS::StackName}-TaskDefinitionArn